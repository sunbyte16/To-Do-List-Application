/**
 * Modern To-Do List Application - JavaScript
 * © 2k25 𝕊𝕦𝕟𝕚𝕝 𝕊𝕙𝕒𝕣𝕞𝕒. All rights reserved
 */

// Modern To-Do List JavaScript

// Edit Task Modal Functions
function editTask(id, text, priority, category, dueDate) {
    const modal = document.getElementById('editModal');
    const form = document.getElementById('editForm');
    
    // Set form action
    form.action = `/edit/${id}`;
    
    // Populate form fields
    document.getElementById('editTaskText').value = text;
    document.getElementById('editPriority').value = priority;
    document.getElementById('editCategory').value = category;
    document.getElementById('editDueDate').value = dueDate === 'null' ? '' : dueDate;
    
    // Show modal
    modal.style.display = 'block';
    
    // Focus on task text input
    setTimeout(() => {
        document.getElementById('editTaskText').focus();
    }, 100);
}

function closeEditModal() {
    const modal = document.getElementById('editModal');
    modal.style.display = 'none';
}

// Close modal when clicking outside
window.onclick = function(event) {
    const modal = document.getElementById('editModal');
    if (event.target === modal) {
        closeEditModal();
    }
}

// Keyboard shortcuts
document.addEventListener('keydown', function(event) {
    // Escape key to close modal
    if (event.key === 'Escape') {
        closeEditModal();
    }
    
    // Ctrl/Cmd + Enter to submit forms
    if ((event.ctrlKey || event.metaKey) && event.key === 'Enter') {
        const activeElement = document.activeElement;
        const form = activeElement.closest('form');
        if (form) {
            form.submit();
        }
    }
});

// Auto-focus on task input when page loads
document.addEventListener('DOMContentLoaded', function() {
    const taskInput = document.querySelector('.task-input');
    if (taskInput) {
        taskInput.focus();
    }
    
    // Add smooth animations to task items
    const taskItems = document.querySelectorAll('.task-item');
    taskItems.forEach((item, index) => {
        item.style.animationDelay = `${index * 0.1}s`;
        item.classList.add('fade-in');
    });
    
    // Add click handlers for better UX
    addClickHandlers();
    
    // Initialize tooltips
    initializeTooltips();
});

// Add click handlers for better user experience
function addClickHandlers() {
    // Make task items clickable to toggle completion
    const taskItems = document.querySelectorAll('.task-item');
    taskItems.forEach(item => {
        const taskContent = item.querySelector('.task-content');
        const toggleBtn = item.querySelector('.toggle-btn');
        
        if (taskContent && toggleBtn) {
            taskContent.addEventListener('click', function(e) {
                // Don't trigger if clicking on buttons or forms
                if (e.target.closest('button') || e.target.closest('form')) {
                    return;
                }
                toggleBtn.click();
            });
        }
    });
    
    // Add keyboard navigation for filter buttons
    const filterBtns = document.querySelectorAll('.filter-btn');
    filterBtns.forEach(btn => {
        btn.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                btn.click();
            }
        });
    });
}

// Initialize tooltips for better UX
function initializeTooltips() {
    const tooltipElements = [
        { selector: '.toggle-btn', text: 'Click to toggle completion' },
        { selector: '.edit-btn', text: 'Edit this task' },
        { selector: '.delete-btn', text: 'Delete this task' },
        { selector: '.add-btn', text: 'Add new task (Ctrl+Enter)' }
    ];
    
    tooltipElements.forEach(({ selector, text }) => {
        const elements = document.querySelectorAll(selector);
        elements.forEach(el => {
            el.title = text;
        });
    });
}

// Add CSS animation classes
const style = document.createElement('style');
style.textContent = `
    .fade-in {
        animation: fadeInUp 0.6s ease forwards;
        opacity: 0;
        transform: translateY(20px);
    }
    
    @keyframes fadeInUp {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .task-item {
        cursor: pointer;
    }
    
    .task-item:active {
        transform: translateY(-1px) scale(0.98);
    }
    
    .bounce-in {
        animation: bounceIn 0.6s ease;
    }
    
    @keyframes bounceIn {
        0% {
            opacity: 0;
            transform: scale(0.3);
        }
        50% {
            opacity: 1;
            transform: scale(1.05);
        }
        70% {
            transform: scale(0.9);
        }
        100% {
            opacity: 1;
            transform: scale(1);
        }
    }
    
    .shake {
        animation: shake 0.5s ease-in-out;
    }
    
    @keyframes shake {
        0%, 100% { transform: translateX(0); }
        10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
        20%, 40%, 60%, 80% { transform: translateX(5px); }
    }
`;
document.head.appendChild(style);

// Form validation and enhancement
document.addEventListener('DOMContentLoaded', function() {
    const addForm = document.querySelector('.add-task-form');
    const taskInput = document.querySelector('.task-input');
    
    if (addForm && taskInput) {
        addForm.addEventListener('submit', function(e) {
            const taskText = taskInput.value.trim();
            
            if (!taskText) {
                e.preventDefault();
                taskInput.classList.add('shake');
                taskInput.focus();
                
                setTimeout(() => {
                    taskInput.classList.remove('shake');
                }, 500);
                
                return false;
            }
            
            // Add loading state
            const submitBtn = addForm.querySelector('.add-btn');
            if (submitBtn) {
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
                submitBtn.disabled = true;
            }
        });
        
        // Auto-resize textarea behavior for task input
        taskInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 120) + 'px';
        });
    }
});

// Add success/error notifications
function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
        ${message}
    `;
    
    // Add notification styles
    Object.assign(notification.style, {
        position: 'fixed',
        top: '20px',
        right: '20px',
        background: type === 'success' ? '#28a745' : '#dc3545',
        color: 'white',
        padding: '15px 20px',
        borderRadius: '10px',
        boxShadow: '0 5px 15px rgba(0,0,0,0.2)',
        zIndex: '9999',
        display: 'flex',
        alignItems: 'center',
        gap: '10px',
        animation: 'slideInRight 0.3s ease'
    });
    
    document.body.appendChild(notification);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
        notification.style.animation = 'slideOutRight 0.3s ease';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// Add slide animations for notifications
const notificationStyles = document.createElement('style');
notificationStyles.textContent = `
    @keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @keyframes slideOutRight {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
`;
document.head.appendChild(notificationStyles);